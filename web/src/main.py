# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_main')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_main')
    _main = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_main', [dirname(__file__)])
        except ImportError:
            import _main
            return _main
        try:
            _mod = imp.load_module('_main', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _main = swig_import_helper()
    del swig_import_helper
else:
    import _main
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class OptionHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionHandler, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _main.new_OptionHandler()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, options):
        return _main.OptionHandler_run(self, options)
    __swig_destroy__ = _main.delete_OptionHandler
    __del__ = lambda self: None
OptionHandler_swigregister = _main.OptionHandler_swigregister
OptionHandler_swigregister(OptionHandler)

class Options(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Options, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _main.new_Options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def parseCommandLine(self, argc, argv):
        return _main.Options_parseCommandLine(self, argc, argv)

    def getInputFilename(self):
        return _main.Options_getInputFilename(self)

    def setInputFilename(self, filename):
        return _main.Options_setInputFilename(self, filename)

    def getOutputFilename(self):
        return _main.Options_getOutputFilename(self)

    def setOutputFilename(self, filename):
        return _main.Options_setOutputFilename(self, filename)

    def getSplitChannels(self):
        return _main.Options_getSplitChannels(self)

    def hasInputFormat(self):
        return _main.Options_hasInputFormat(self)

    def getInputFormat(self):
        return _main.Options_getInputFormat(self)

    def setInputFormat(self, format):
        return _main.Options_setInputFormat(self, format)

    def hasOutputFormat(self):
        return _main.Options_hasOutputFormat(self)

    def getOutputFormat(self):
        return _main.Options_getOutputFormat(self)

    def setOutputFormat(self, format):
        return _main.Options_setOutputFormat(self, format)

    def getStartTime(self):
        return _main.Options_getStartTime(self)

    def getEndTime(self):
        return _main.Options_getEndTime(self)

    def hasEndTime(self):
        return _main.Options_hasEndTime(self)

    def getSamplesPerPixel(self):
        return _main.Options_getSamplesPerPixel(self)

    def isAutoSamplesPerPixel(self):
        return _main.Options_isAutoSamplesPerPixel(self)

    def hasSamplesPerPixel(self):
        return _main.Options_hasSamplesPerPixel(self)

    def getPixelsPerSecond(self):
        return _main.Options_getPixelsPerSecond(self)

    def hasPixelsPerSecond(self):
        return _main.Options_hasPixelsPerSecond(self)

    def getBits(self):
        return _main.Options_getBits(self)

    def hasBits(self):
        return _main.Options_hasBits(self)

    def getImageWidth(self):
        return _main.Options_getImageWidth(self)

    def getImageHeight(self):
        return _main.Options_getImageHeight(self)

    def getColorScheme(self):
        return _main.Options_getColorScheme(self)

    def getBorderColor(self):
        return _main.Options_getBorderColor(self)

    def getBackgroundColor(self):
        return _main.Options_getBackgroundColor(self)

    def getWaveformColors(self):
        return _main.Options_getWaveformColors(self)

    def getAxisLabelColor(self):
        return _main.Options_getAxisLabelColor(self)

    def hasBorderColor(self):
        return _main.Options_hasBorderColor(self)

    def hasBackgroundColor(self):
        return _main.Options_hasBackgroundColor(self)

    def hasWaveformColor(self):
        return _main.Options_hasWaveformColor(self)

    def hasAxisLabelColor(self):
        return _main.Options_hasAxisLabelColor(self)

    def getRenderAxisLabels(self):
        return _main.Options_getRenderAxisLabels(self)

    def getWaveformStyle(self):
        return _main.Options_getWaveformStyle(self)

    def getBarWidth(self):
        return _main.Options_getBarWidth(self)

    def getBarGap(self):
        return _main.Options_getBarGap(self)

    def getBarStyle(self):
        return _main.Options_getBarStyle(self)

    def isAutoAmplitudeScale(self):
        return _main.Options_isAutoAmplitudeScale(self)

    def getAmplitudeScale(self):
        return _main.Options_getAmplitudeScale(self)

    def getPngCompressionLevel(self):
        return _main.Options_getPngCompressionLevel(self)

    def getQuiet(self):
        return _main.Options_getQuiet(self)

    def getHelp(self):
        return _main.Options_getHelp(self)

    def getVersion(self):
        return _main.Options_getVersion(self)

    def showUsage(self, stream):
        return _main.Options_showUsage(self, stream)

    def showVersion(self, stream):
        return _main.Options_showVersion(self, stream)

    def reportError(self, message):
        return _main.Options_reportError(self, message)

    def handleAmplitudeScaleOption(self, option_value):
        return _main.Options_handleAmplitudeScaleOption(self, option_value)

    def handleZoomOption(self, option_value):
        return _main.Options_handleZoomOption(self, option_value)
    __swig_destroy__ = _main.delete_Options
    __del__ = lambda self: None
Options_swigregister = _main.Options_swigregister
Options_swigregister(Options)

# This file is compatible with both classic and new-style classes.


